#!/usr/bin/env node

const events = require('events');
const fs = require('fs')
const os = require('os');
const program = require('commander');

/* pvcLocalDir is global, for use in pvcWatcher.js
*/
pvcLocalDir = os.homedir() + '/.local/share/pvc';
const Watcher = require("./pvcWatcher");

const pvcCommands = ["add", "delete", "show", "list", "check", "update", "config"];
var pvcConfig = {};
var action;
var siteList = [];
var watchers = [];
var checkCounter = {"size":0, "counter":0};

global.eventEmitter = new events.EventEmitter();

eventEmitter.on('SaveWatchers', function () {
  // Save the watch list
  fs.rename(pvcWatchListFile, pvcLocalDir + '/watchListPrev.json', function (err) {
    if (err) {
      console.log("ERROR renaming watchList. New watchList not created"); 
    }
    //console.log("watchList in memory: " + watchers);
    fs.writeFile(pvcWatchListFile, JSON.stringify({"data":watchers}, null, 1), function (err) {
      if ( err) {
        console.log("ERROR writing watchList - new watchList not created"); 
      }
      console.log("New watchList saved OK");
      process.exit(0);
    });
  });
});

eventEmitter.on('CheckedWatcher', function (checkedWatcher, remote) {
  //console.log(checkedWatcher.version + " vs. " + remote);
  if (checkedWatcher.version == remote) {
    console.log("Project " + checkedWatcher.project + "  = " + checkedWatcher.version);
  } else {
    console.log("******* " + checkedWatcher.project + " local version = " + checkedWatcher.version + " remote version = " + remote);
  }
  checkCounter.counter += 1;
  //console.log("check counter = " + checkCounter.counter + ", size = " + checkCounter.size);
  if (checkCounter.counter == checkCounter.size) {
    checkCounter.counter = 0;
    process.exit(0);
  }
});

eventEmitter.on('UpdateWatcher', function (watcher, version) {
  watcher.version = version;
  eventEmitter.emit("SaveWatchers");
});

eventEmitter.on('IsValidWatcher', function (newWatcher) {
  var found = false;
  for (var i=0;i<watchers.length;i++) {
    if (newWatcher.project == watchers[i].project) {
      found = true;
      break
    }
  }
  if (!found) {
    watchers.push(newWatcher);
    eventEmitter.emit("SaveWatchers");
  } else {
    console.log("Project " + newWatcher.project + " already exists");
    process.exit(4);
  }
});

eventEmitter.on('NotValidWatcher', function (newWatcher) {
  //console.log("ERROR validating new watcher. Exiting now"); 
  process.exit(2);
});

eventEmitter.on('setup_ready', parseCommand );

eventEmitter.on('config_ready', function (obj) {
  pvcConfig = obj;
  loadWatchList();
});

// Setup:
// Definitions
// Load configuration
// on.config_ready, load watch list
// on.setup_ready, parse commands

// Definitions
var pvcConfigDir = os.homedir() + '/.config/pvc';
var pvcConfigFile = pvcConfigDir + '/pvcConfig.json';
var pvcWatchListFile = pvcLocalDir + '/watchList.json';

// When/if necessary directories exist, load configuration
fs.mkdir(pvcLocalDir, function (err) {
  if (err ) {
    if (err.code != "EEXIST") {
      console.log('os.mkdir(pvcLocalDir) ' + err);
      process.exit(1);
    }
  }
  fs.mkdir(pvcConfigDir, function (err) {
    if (err ) {
      if (err.code != "EEXIST") {
        console.log('os.mkdir(pvcLocalDir) ' + err);
        process.exit(1);
      }
    }
  });
  pvcLoadConfiguration();
});

function usage () {
  console.log("Usage:");
  console.log("      pvc list");
  console.log("      pvc show   [ --project projectname ]");
  console.log("      pvc check  [ --project projectname ]");
  console.log("      pvc update < --project projectname >");
  console.log("      pvc add    < --project projectname --type repotype --urlbase urlbase >");
  console.log("      pvc delete < --project projectname >");
  console.log("      pvc config [ --add item | --delete item | --show [item] ]");
}

function loadWatchList () {
  fs.readFile(pvcWatchListFile, "utf8", function (err, data) {
    //console.log("Open file: " + pvcWatchListFile);
    if (err) {
      if (err.code == "ENOENT") {
        console.log("Had ENOENT: empty watchlist");
        eventEmitter.emit("setup_ready");
        return;
      } else {
        console.log("ERROR reading file: " + err);
        return;
      }
    }
    var obj = JSON.parse(data)
    for (var i=0;i<obj.data.length;i++) {
      var entry = obj.data[i];
      var watcher = new Watcher(entry);
      watchers.push(watcher);
    };
    eventEmitter.emit("setup_ready");
  });
}


function pvcLoadConfiguration () {
  //console.log("Loading saved configuration");
  fs.readFile(pvcConfigFile, "utf8", function (err, data) {
    //console.log("Open file: " + pvcConfigDir);
    if (err) {
      if (err.code == "ENOENT") {
        console.log("Had ENOENT: empty configuration");
      } else {
        console.log("ERROR reading file: " + err);
      }
      eventEmitter.emit("config_ready", {});
      return;
    }
    //console.log("pvcLoadConfiguration");
    var obj = JSON.parse(data)

    // Add "global" definitions
    obj["pvcLocalDir"] = pvcLocalDir;
    obj["pvcConfigDir"] = pvcConfigDir;
    obj["pvcConfigFile"] = pvcConfigFile;
    obj["pvcWatchListFile"] = pvcWatchListFile;

    eventEmitter.emit("config_ready", obj);
  });
}

function pvcSaveConfiguration (config) {
  fs.writeFile(pvcConfigFile, JSON.stringify(config, null, 1), function (err) {
    if ( err) {
      console.log("ERROR writing configuration - new configuration not created"); 
    }
    console.log("New configuration saved OK");
    process.exit(0);
  });
}

/* Commands & options
*/
program.option('-d, --debug', 'Additional debugging output')
program.command("add")
  .description('Add a project to the watch list')
  .option("-p, --project <name>","project name")
  .option("-t, --type <type>","repository type")
  .option("-u, --urlbase [urlbase]","url base")
  .action( function (cmd) {
    if (! cmd.project) {
      throw new Error('--project required');
    }
    if (! cmd.type) {
      throw new Error('--type required');
    }
    if (! cmd.urlbase) {
       cmd.urlbase = cmd.project
    }
    var newWatcher = new Watcher({"project":cmd.project,"type":cmd.type,"urlbase":cmd.urlbase,"version":"0.0"});
    // Now check that newWatcher is valid
    // If so, it sends an IsValidWatcher event
    // triggering its push onto watchers array.
    newWatcher.check({'action':'validate','config':pvcConfig});
  });
program.command("delete [projects...]")
  .description('Delete named project(s)')
  .option("-p, --project","delete named project(s)")
  .alias("remove")
  .action( function (cmd) {
    console.log("Removing project: " + cmd);
    if (program.args[1].project) {
      cmd.push(program.args[1].project);
    }
    if (cmd.length > 0) {
      cmd.forEach( function (item, index) {
        var index = watchers.findIndex( function (el) {
          return el.project == item;
        });
        if (index < 0 ) {
          console.log("Couldn't find a project to remove named: " + item);
          process.exit(3);
        }
        watchers.splice(index, 1);
        //console.log(watchers);
        eventEmitter.emit("SaveWatchers");
      });
    } else {
      console.log("Can't DELETE all. Please specify projects to delete");
    }

  });
program.command("show [projects...]")
  .description('Show details of project(s)')
  .option("-p, --project <more...>","show details of named project(s)")
  .action( function (cmd) {
    if (program.args[1].project) {
      cmd.push(program.args[1].project);
    }
    if (cmd.length > 0) {
      cmd.forEach(function (item, index) {
        //console.log("SHOW: " + item);
        var index = watchers.findIndex( function (el) {
          return el.project == item;
        });
        if (index < 0 ) {
          console.log("Couldn't find a project to show named: " + item);
          process.exit(3);
        }
        console.log(JSON.stringify(watchers[index], null, 1));
      });
    } else {
      //console.log("SHOW: all");
      watchers.forEach( function (item, index) {
        console.log(JSON.stringify(item, null, 1));
      });
    }
    process.exit(0);
  });
program.command("list")
  .description('List known projects')
  .action( function (cmd) {
    if ( watchers.length == 0) {
      console.log("No entries found");
    } else {
      watchers.forEach( function(item, index) {
        console.log(item.project + "  " + item.version);
      });
    }
    process.exit(0);
  });
program.command("check [projects...]")
  .description('Check versions of project(s)')
  .option("-p, --project <more...>","check versions of project(s)")
  .action( function (cmd) {
    //console.log("cmd = " + cmd);
    if (program.args[1].project) {
      cmd.push(program.args[1].project);
    }
    if (cmd.length > 0) {
      cmd.forEach(function (item, index) {
        //console.log("CHECK: " + item);
        var index = watchers.findIndex( function (el) {
          return el.project == item;
        });
        if (index < 0 ) {
          console.log("Couldn't find a project to check named: " + item);
          process.exit(3);
        }
        checkCounter.size = 1;
        checkCounter.counter = 0;
        //console.log("Checking single " + checkCounter.size + " project");
        watchers[index].check({'action':'check','config':pvcConfig});
      });
    } else {
      console.log("CHECK: all");
      checkCounter.size = watchers.length;
      checkCounter.counter = 0;
      console.log("Checking all " + checkCounter.size + " projects");
      watchers.forEach( function(item, index) {
        item.check({'config':pvcConfig});
      });
    }
  });
program.command("update")
  .description("Update a  project's version")
  .option("-p, --project <project>","Name of project to update")
  .option("-v, --version <version>", "Specify the new version")
  .action( function (cmd) {
    var projectName, newVersion;
    //console.log(typeof(cmd));
    if (typeof(cmd) === 'object') {
      if (cmd.project) {
        //console.log(cmd.project);
        projectName = cmd.project;
      } else {
        console.log("Need a project to update");
        process.exit(1);
      }
      if (cmd.version && typeof(cmd.version) === 'string') {
        //console.log(cmd.version);
        newVersion = cmd.version;
      } else {
        console.log("Using network to update version");
      }
    } else {
      //console.log(cmd);
      projectName = cmd;
      if (typeof(program.args[1].version) === 'string') {
        //console.log(program.args[1].version);
        newVersion = program.args[1].version;
      } else {
        console.log("Using network to update version");
      }
    }
    if (!projectName ) {
      console.log("Need a project name to update");
      process.exit(1);
    }

    var index = watchers.findIndex( function (el) {
      return el.project == projectName;
    });
    if (index < 0 ) {
      console.log("Couldn't find a project to update named: " + projectName);
      process.exit(3);
    }
    console.log("Updating project: " + projectName);

    if (!newVersion) {
      console.log("No --version supplied so use remote version");
      checkCounter.size = 1;
      checkCounter.counter = 0;
      //console.log("Updating single " + checkCounter.size + " project");
      watchers[index].check({'action':'update','config':pvcConfig});
      return;
    }
    console.log("Updating " + watchers[index].project + " to version " + newVersion);
    eventEmitter.emit("UpdateWatcher", watchers[index], newVersion);
  });
program.command("config")
  .description('Add, delete or show configuration items')
  .option("-a, --add <item>","Add a configuration item")
  .option("-d, --delete <item>","Delete a configuration item")
  .option("-s, --show [item]","Show a configuration item")
  .action( function (cmd) {
    pvcDebug("XXXXX",'PVC_INFO');
    if (cmd.add) {
      console.log("ADD config item: " + cmd.add);
      setConfigEntry("add", cmd.add);
    } else if (cmd.delete) {
      console.log("DELETE config item: " + cmd.delete);
      setConfigEntry("delete", cmd.delete);
    } else if (cmd.show) {
      if (typeof(cmd.show) === "boolean" ) {
        console.log("SHOW config item: (No item supplied)" );
        setConfigEntry("show", null);
      } else {
        console.log("SHOW config item: " + cmd.show);
        setConfigEntry("show", cmd.show);
      }
    } else {
      console.log("UNKNOWN config request (Need: --add <item>| --delete <item>| --show <item>)");
      // Missing option for config command => show pertinent pvc information
      // but don't just show everything in case anything sensitive (passwords, auth keys)
      //console.log("XXXX pvcConfig: " + JSON.stringify(pvcConfig,null,1));
      //console.log("PVC - Project Version Checker \u00A9Copyright 2017 Christoph Willing");
      console.log("PVC - Project Version Checker");
      console.log("       watched projects file: " + pvcConfig["pvcWatchListFile"]);
      console.log("     user configuration file: " + pvcConfig["pvcConfigFile"]);
      console.log("   available retrieval types: " + pvcRetrievalTypes);
      process.exit(0);
    }
  });

function parseCommand () {
  if (pvcCommands.indexOf(process.argv[2]) > -1) {
    //console.log("Known command (" + process.argv[2] + ")");
    program.parse(process.argv);
  } else if (process.argv[2] && process.argv[2].charAt(0) == '-') {
    program.parse(process.argv);
  } else {
    console.log("UNknown command (" + process.argv[2] + ")");
    process.exit(1);
  }
}


function setConfigEntry (mode, entry) {
  console.log(mode + "ing configuration item: " + entry);

  // Split the entry into its components
  if (entry) {
    var parts = entry.split(',');
    var category = parts[0];
    var configItems = parts.slice(1);
  }

  switch (mode) {
    case 'add':
      // Ensure the category exists
      if ( Object.keys(pvcConfig).indexOf(category) < 0 ) {
        pvcConfig[category] = {};
      };

      // Add the items
      for (var i=0;i<configItems.length;i++) {
        var item =  configItems[i].split(':');
        //console.log("this item says " + item[0] + " = " + item[1]);
        pvcConfig[category][item[0]] = item[1];
      };
      break;
    case 'delete':
      if (configItems && configItems.length > 0) {
        for (var i=0;i<configItems.length;i++) {
          var item =  configItems[i].split(':');
          delete pvcConfig[category][item[0]];
        }
        break;
      }
      if (category ) {
        delete pvcConfig[category];
      } 
      break;
    case 'show':
      if (configItems && configItems.length > 0) {
        for (var i=0;i<configItems.length;i++) {
          var item =  configItems[i].split(':');
          console.log(JSON.stringify(pvcConfig[category][item[0]], null, 1));
        }
        break;
      }
      if (category ) {
        console.log(JSON.stringify(pvcConfig[category], null, 1));
      } else {
        console.log(JSON.stringify(pvcConfig, null, 1));
      }
      break;
    default:
      break;
  };
  // Show the result
  //console.log("pvcConfig: " + JSON.stringify(pvcConfig));

  // Save the result
  //fs.writeFileSync('pvcConfig.json', JSON.stringify(pvcConfig, null, 1));
  if (mode != "show") {
    pvcSaveConfiguration(pvcConfig);
  } else {
    process.exit(0);
  }

}

/* pvcDebug is global for use in modules files
*/
pvcDebug = function (msg, level) {
  if (! program.debug) return;
  var level = level || 'PVC_DEBUG';
  switch (level) {
    case 'PVC_DEBUG':
      console.log("PVC DEBUG: " + msg);
      break;
    case 'PVC_ERROR':
      console.log("PVC ERROR: " + msg);
      break;
    case 'PVC_INFO':
      console.log("PVC INFO: " + msg);
      break;
    default:
      break;
  }
}


setInterval( function() {
  //console.log("looping ...");
}, (1000 + Math.floor((Math.random() * 100) + 1)));

process.on('exit', function (code) {
  if ( code != 0) {
    console.log(`Exiting with code: ${code}`);
  }
});

/* ex:set ai shiftwidth=2 inputtab=spaces smarttab noautotab: */

